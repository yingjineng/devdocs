<%# 存储响应的缓存名称 %>
<%# 如果缓存名称更改，则认为 DevDocs 已更新 %>
const cacheName = '<%= service_worker_cache_name %>';

<%# Service Worker 安装时要缓存的 URL 列表 %>
const urlsToCache = [
  '/',
  '/favicon.ico',
  '/manifest.json',
  '<%= service_worker_asset_urls.join "',\n  '" %>',
  '<%= doc_index_urls.join "',\n  '" %>',
];

<%# 设置缓存 %>
self.addEventListener('install', event => {
  self.skipWaiting();

  event.waitUntil(
    caches.open(cacheName).then(cache => cache.addAll(urlsToCache)),
  );
});

<%# 移除旧的缓存 %>
self.addEventListener('activate', event => {
  event.waitUntil((async () => {
    const keys = await caches.keys();
    const jobs = keys.map(key => key !== cacheName ? caches.delete(key) : Promise.resolve());
    return Promise.all(jobs);
  })());
});

<%# 处理 HTTP 请求 %>
self.addEventListener('fetch', event => {
  event.respondWith((async () => {
    const cachedResponse = await caches.match(event.request);
    if (cachedResponse) return cachedResponse;

    try {
      const response = await fetch(event.request);
      return response;
    } catch (err) {
      const url = new URL(event.request.url);

      const pathname = url.pathname;
      const filename = pathname.substr(1 + pathname.lastIndexOf('/')).split(/\#|\?/g)[0];
      const extensions = ['.html', '.css', '.js', '.json', '.png', '.ico', '.svg', '.xml'];

      <%# 如果用户访问如 devdocs.io/offline 或 devdocs.io/javascript/global_objects/array/find 这样的 URL，尝试从缓存返回首页 %>
      <%# 首页会确保显示正确的文档或合适的离线页面 %>
      if (url.origin === location.origin && !extensions.some(ext => filename.endsWith(ext))) {
        const cachedIndex = await caches.match('/');
        if (cachedIndex) return cachedIndex;
      }

      throw err;
    }
  })());
});
